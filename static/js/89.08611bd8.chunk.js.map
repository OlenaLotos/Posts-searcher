{"version":3,"file":"static/js/89.08611bd8.chunk.js","mappings":"sKAEMA,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACzB,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMP,GAAYQ,GAAE,iBAAYJ,GAA/C,SACGC,KAFID,EADgB,IAQ3B,OAAO,wBAAKF,GACb,EAED,MAEAJ,EAASW,aAAe,CACtBV,MAAO,G,8JCkBT,EAnCwB,SAAC,GAAkB,IAAhBW,EAAe,EAAfA,SACzB,GAA0BC,EAAAA,EAAAA,UAAS,CACjCC,OAAQ,KADV,eAAON,EAAP,KAAcO,EAAd,KAoBA,OACE,kBAAMH,SATa,SAAAI,GACnBA,EAAEC,iBACFL,GAAS,UAAKJ,IACdO,EAAS,CACPD,OAAQ,IAEX,EAGC,WACE,kBACEI,KAAK,SACLC,MAAOX,EAAMM,OACbM,SArBe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdH,EAAgBG,EAAhBH,KAAMC,EAAUE,EAAVF,MACdJ,GAAS,kBACJP,GADG,cAELU,EAAOC,IAEX,EAgBKG,YAAY,SACZC,UAAQ,KAEV,mBAAQC,KAAK,SAAb,sBAGL,E,mBC8BD,EAzDwB,WACtB,OAA0BX,EAAAA,EAAAA,UAAS,CACjCZ,MAAO,GACPwB,SAAS,EACTC,MAAO,OAHT,eAAOlB,EAAP,KAAcO,EAAd,KAMA,GAAwCY,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMf,EAASc,EAAaE,IAAI,WAEhCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfjB,GAAS,SAAAkB,GAAS,yBACbA,GADa,IAEhBR,SAAS,GAFO,IAFH,UAOIS,EAAAA,EAAAA,IAAYpB,GAPhB,OAOTqB,EAPS,OAQfpB,GAAS,SAAAkB,GAAS,yBACbA,GADa,IAEhBhC,MAAOkC,GAFS,IARH,gDAafpB,GAAS,SAAAkB,GAAS,yBACbA,GADa,IAEhBP,MAAK,MAFW,IAbH,yBAkBfX,GAAS,SAAAkB,GAAS,yBACbA,GADa,IAEhBR,SAAS,GAFO,IAlBH,4EAAH,qDAyBZX,GACFkB,GAEH,GAAE,CAAClB,IAEJ,IAIQb,EAAUO,EAAVP,MAER,OACE,iBAAKmC,UAAU,YAAf,WACE,+CACA,SAAC,EAAD,CAAiBxB,SATA,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACtBe,EAAgB,CAAEf,OAAAA,GACnB,IAQIb,EAAMoC,OAAS,IAAK,SAACrC,EAAA,EAAD,CAAUC,MAAOA,MAG3C,C,0KC7DKqC,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,6CACTC,OAAQ,CACNC,OAAQ,MAICC,EAAQ,mCAAG,2GAAOC,EAAP,+BAAe,EAAf,SACCN,EAASR,IAAI,IAAK,CACvCW,OAAQ,CACNG,MAAAA,KAHkB,uBACdT,EADc,EACdA,KADc,kBAOfA,GAPe,2CAAH,qDAURU,EAAa,mCAAG,WAAMvC,GAAN,yFACJgC,EAASR,IAAT,WAAiBxB,IADb,uBACnB6B,EADmB,EACnBA,KADmB,kBAGpBA,GAHoB,2CAAH,sDAMbD,EAAW,mCAAG,WAAMY,GAAN,yFACFR,EAASR,IAAI,IAAK,CACvCW,OAAQ,CACNK,EAAAA,KAHqB,uBACjBX,EADiB,EACjBA,KADiB,kBAOlBA,GAPkB,2CAAH,sDAUXY,EAAe,mCAAG,WAAMzC,GAAN,yFACNgC,EAASR,IAAT,WAAiBxB,EAAjB,cADM,uBACrB6B,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,qD","sources":["modules/PostList/PostList.jsx","modules/PostsSearchForm/PostsSearchForm.jsx","pages/PostsSearchPage/PostsSearchPage.jsx","shared/api/posts.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst PostList = ({ items }) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title }) => (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/posts/${id}`}>\n        {title}\n      </Link>\n    </li>\n  ));\n\n  return <ol>{elements}</ol>;\n};\n\nexport default PostList;\n\nPostList.defaultProps = {\n  items: [],\n};\n","import { useState } from 'react';\n\nconst PostsSearchForm = ({ onSubmit }) => {\n  const [state, setState] = useState({\n    search: '',\n  });\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({\n      search: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"search\"\n        value={state.search}\n        onChange={handleChange}\n        placeholder=\"Search\"\n        required\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default PostsSearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport PostsSearchForm from '../../modules/PostsSearchForm/PostsSearchForm';\nimport PostList from '../../modules/PostList/PostList';\n\nimport { searchPosts } from '../../shared/api/posts';\n\nconst PostsSearchPage = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const search = searchParams.get('search');\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setState(prevState => ({\n          ...prevState,\n          loading: true,\n        }));\n\n        const data = await searchPosts(search);\n        setState(prevState => ({\n          ...prevState,\n          items: data,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          error,\n        }));\n      } finally {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n        }));\n      }\n    };\n\n    if (search) {\n      fetchPosts();\n    }\n  }, [search]);\n\n  const changeSearch = ({ search }) => {\n    setSearchParams({ search });\n  };\n\n  const { items } = state;\n\n  return (\n    <div className=\"container\">\n      <h2>Posts Search Page</h2>\n      <PostsSearchForm onSubmit={changeSearch} />\n      {items.length > 0 && <PostList items={items} />}\n    </div>\n  );\n};\n\nexport default PostsSearchPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/posts',\n  params: {\n    _limit: 12,\n  },\n});\n\nexport const getPosts = async (_page = 1) => {\n  const { data } = await instance.get('/', {\n    params: {\n      _page,\n    },\n  });\n\n  return data;\n};\n\nexport const getSinglePost = async id => {\n  const { data } = await instance.get(`/${id}`);\n\n  return data;\n};\n\nexport const searchPosts = async q => {\n  const { data } = await instance.get('/', {\n    params: {\n      q,\n    },\n  });\n\n  return data;\n};\n\nexport const getPostComments = async id => {\n  const { data } = await instance.get(`/${id}/comments`);\n\n  return data;\n};\n"],"names":["PostList","items","location","useLocation","elements","map","id","title","state","from","to","defaultProps","onSubmit","useState","search","setState","e","preventDefault","name","value","onChange","target","placeholder","required","type","loading","error","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchPosts","prevState","searchPosts","data","className","length","instance","axios","baseURL","params","_limit","getPosts","_page","getSinglePost","q","getPostComments"],"sourceRoot":""}