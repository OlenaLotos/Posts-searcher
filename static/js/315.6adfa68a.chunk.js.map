{"version":3,"file":"static/js/315.6adfa68a.chunk.js","mappings":"uKAEMA,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACzB,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAMP,GAAYQ,GAAE,iBAAYJ,GAA/C,SACGC,KAFID,EADgB,IAQ3B,OAAO,wBAAKF,GACb,EAED,MAEAJ,EAASW,aAAe,CACtBV,MAAO,G,8FCfM,SAASW,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,EAClD,CDES,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAML,KAAKQ,EACtH,CFGmC,CAAgBJ,KAAQ,EAAAO,EAAA,GAA2BP,IGLvE,WACb,MAAM,IAAIQ,UAAU,uIACtB,CHG8F,EAC9F,C,0FIqDA,EApDc,WACZ,OAA0BC,EAAAA,EAAAA,UAAS,CACjCrB,MAAO,GACPsB,SAAS,EACTC,MAAO,OAHT,eAAOhB,EAAP,KAAciB,EAAd,MAMAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,oGAEfF,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBL,SAAS,EACTC,MAAO,MAHS,IAFH,UAQMK,EAAAA,EAAAA,MARN,OAQTC,EARS,OASfL,GAAS,SAAAG,GACP,OAAO,kBACFA,GADL,IAEE3B,MAAM,GAAD,SAAM2B,EAAU3B,OAAhB,EAA0B6B,KAElC,IAdc,gDAgBfL,GAAS,SAAAG,GAAS,yBACbA,GADa,IAEhBJ,MAAK,MAFW,IAhBH,yBAqBfC,GAAS,SAAAG,GACP,OAAO,kBACFA,GADL,IAEEL,SAAS,GAEZ,IA1Bc,4EAAH,qDA8BhBI,GACD,GAAE,CAACF,IAEJ,IAAQxB,EAA0BO,EAA1BP,MAAOsB,EAAmBf,EAAnBe,QAASC,EAAUhB,EAAVgB,MAExB,OACE,2BACGvB,EAAM8B,OAAS,IAAK,SAAC/B,EAAA,EAAD,CAAUC,MAAOA,IACrCsB,IAAW,yCACXC,IAAS,kDAGf,EC9CD,EATiB,WACf,OACE,iBAAKQ,UAAU,YAAf,WACE,4CACA,SAAC,EAAD,MAGL,C,0KCPKC,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,6CACTC,OAAQ,CACNC,OAAQ,MAICR,EAAQ,mCAAG,2GAAOS,EAAP,+BAAe,EAAf,SACCL,EAASM,IAAI,IAAK,CACvCH,OAAQ,CACNE,MAAAA,KAHkB,uBACdE,EADc,EACdA,KADc,kBAOfA,GAPe,2CAAH,qDAURC,EAAa,mCAAG,WAAMnC,GAAN,yFACJ2B,EAASM,IAAT,WAAiBjC,IADb,uBACnBkC,EADmB,EACnBA,KADmB,kBAGpBA,GAHoB,2CAAH,sDAMbE,EAAW,mCAAG,WAAMC,GAAN,yFACFV,EAASM,IAAI,IAAK,CACvCH,OAAQ,CACNO,EAAAA,KAHqB,uBACjBH,EADiB,EACjBA,KADiB,kBAOlBA,GAPkB,2CAAH,sDAUXI,EAAe,mCAAG,WAAMtC,GAAN,yFACN2B,EAASM,IAAT,WAAiBjC,EAAjB,cADM,uBACrBkC,EADqB,EACrBA,KADqB,kBAGtBA,GAHsB,2CAAH,qD","sources":["modules/PostList/PostList.jsx","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","modules/Posts/Posts.jsx","pages/HomePage/HomePage.jsx","shared/api/posts.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst PostList = ({ items }) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title }) => (\n    <li key={id}>\n      <Link state={{ from: location }} to={`/posts/${id}`}>\n        {title}\n      </Link>\n    </li>\n  ));\n\n  return <ol>{elements}</ol>;\n};\n\nexport default PostList;\n\nPostList.defaultProps = {\n  items: [],\n};\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n\nimport PostList from '../PostList/PostList';\n\nimport { getPosts } from './../../shared/api/posts';\n\nconst Posts = () => {\n  const [state, setState] = useState({\n    items: [],\n    loading: false,\n    error: null,\n  });\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        setState(prevState => ({\n          ...prevState,\n          loading: true,\n          error: null,\n        }));\n\n        const result = await getPosts();\n        setState(prevState => {\n          return {\n            ...prevState,\n            items: [...prevState.items, ...result],\n          };\n        });\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          error,\n        }));\n      } finally {\n        setState(prevState => {\n          return {\n            ...prevState,\n            loading: false,\n          };\n        });\n      }\n    };\n\n    fetchPosts();\n  }, [setState]);\n\n  const { items, loading, error } = state;\n\n  return (\n    <div>\n      {items.length > 0 && <PostList items={items} />}\n      {loading && <p>...load posts</p>}\n      {error && <p>...Posts load failed</p>}\n    </div>\n  );\n};\n\nexport default Posts;\n","import Posts from '../../modules/Posts/Posts';\n\nconst HomePage = () => {\n  return (\n    <div className=\"container\">\n      <h2>All posts page</h2>\n      <Posts />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/posts',\n  params: {\n    _limit: 12,\n  },\n});\n\nexport const getPosts = async (_page = 1) => {\n  const { data } = await instance.get('/', {\n    params: {\n      _page,\n    },\n  });\n\n  return data;\n};\n\nexport const getSinglePost = async id => {\n  const { data } = await instance.get(`/${id}`);\n\n  return data;\n};\n\nexport const searchPosts = async q => {\n  const { data } = await instance.get('/', {\n    params: {\n      q,\n    },\n  });\n\n  return data;\n};\n\nexport const getPostComments = async id => {\n  const { data } = await instance.get(`/${id}/comments`);\n\n  return data;\n};\n"],"names":["PostList","items","location","useLocation","elements","map","id","title","state","from","to","defaultProps","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError","useState","loading","error","setState","useEffect","fetchPosts","prevState","getPosts","result","length","className","instance","axios","baseURL","params","_limit","_page","get","data","getSinglePost","searchPosts","q","getPostComments"],"sourceRoot":""}